
//----------------------------------------------------------------------------------------------------
// game_start
//----------------------------------------------------------------------------------------------------
function game_start() 
{
	PauseGame();
	ReturnBtn.Visible = false;
	gInitialMenu.Visible = true;
	clicks = 0;
	
}

//----------------------------------------------------------------------------------------------------
// repeatedly_execute
//----------------------------------------------------------------------------------------------------
function repeatedly_execute() 
{
  /*if(partytimer == 0){
    Display("TIME IS OVER!");
    lpartytimer.Text = "Time over!";
    partytimer--;
} else {
    partytimer--;
  }*/
  
}

//----------------------------------------------------------------------------------------------------
// repeatedly_execute_always
//----------------------------------------------------------------------------------------------------
function repeatedly_execute_always() 
{
  
}

//----------------------------------------------------------------------------------------------------
// on_key_press
//----------------------------------------------------------------------------------------------------
function on_key_press(eKeyCode keycode) 
{
  if (IsGamePaused()) keycode = 0;
  
  // "System Keys"
  if (keycode == eKeyCtrlQ) QuitGame(1); // Ctrl-Q
  if (keycode == eKeyF9) RestartGame(); // F9
  if (keycode == eKeyF12) SaveScreenShot("scrnshot.pcx");  // F12
  
  // Debugger Keys
  if (keycode == eKeyCtrlS) Debug(0,0); // Ctrl-S, give all inventory
  if (keycode == eKeyCtrlV) Debug(1,0); // Ctrl-V, version
  if (keycode == eKeyCtrlA) Debug(2,0); // Ctrl-A, show walkable areas
  if (keycode == eKeyCtrlX) Debug(3,0); // Ctrl-X, teleport to room
}

//----------------------------------------------------------------------------------------------------
// on_mouse_click
//----------------------------------------------------------------------------------------------------
function on_mouse_click(MouseButton button)
{
	// all mouse clicks are handled in TwoClickHandler.asc!
}

//----------------------------------------------------------------------------------------------------
// on_event
//----------------------------------------------------------------------------------------------------
function on_event (EventType event, int data) 
{
}

//----------------------------------------------------------------------------------------------------
// unhandled_event
//----------------------------------------------------------------------------------------------------
function unhandled_event (int what, int type) 
{
	if (what == 1) // Unhandled events for HOTSPOTS
	{
		if (type == 1) // look
		{
			player.Say("I see nothing special about it.");
		}
		if (type == 2) // interact
		{
			player.Say("I can't do anything with it.");
		}
		if (type == 3) // use inv on
		{
			player.Say("That won't do anything.");
		}
	}
	if (what == 2) // Unhandled events for OBJECTS
	{
		if (type == 0) // look
		{
			player.Say("Looks alright.");
		}
		if (type == 1) // interact
		{
			player.Say("I don't want to have it.");
		}
		if (type == 3) // use inv on
		{
			player.Say("That's a funny idea.");
		}
	}
	if (what == 3) // Unhandled events for CHARACTERS
	{
		if (type == 0) // look
		{
			player.Say("Hm.");
		}
		if (type == 1) // interact
		{
			player.Say("Got nothing to say.");
		}
		if (type == 3) // use inv on
		{
			player.Say("I don't think I should give that away.");
		}
	}
	if (what == 5) // Unhandled events for INVENTORY ITEMS
	{
		if (type == 0) // look
		{
			player.Say("It's just some junk in my inventory.");
		}
		if (type == 1) // interact
		{
			player.Say("Er, no?");
		}
		if (type == 3) // use inv on
		{
			player.Say("That's ridiculous.");
		}
	}
}

//----------------------------------------------------------------------------------------------------
// dialog_request
//----------------------------------------------------------------------------------------------------
function dialog_request(int param) 
{
}

//----------------------------------------------------------------------------------------------------
// gInventoryBar
//----------------------------------------------------------------------------------------------------
/*function btnInvScrollLeft_OnClick(GUIControl *control, MouseButton button)
{
	InventoryWindow1.ScrollDown();
}

function btnInvScrollRight_OnClick(GUIControl *control, MouseButton button)
{
	InventoryWindow1.ScrollUp();
}*/

function btnQuit_OnClick(GUIControl *control, MouseButton button)
{
	PauseGame();
	gInventoryBar.Visible = false;
	gInitialMenu.Visible = true;
}

function modifyscore(int characterID, int score) {
	switch(characterID) {
		case 1: //butler
		scorebutler = scorebutler + score;
		break;
		case 2: //evil
		scoreevil = scoreevil + score;
		break;
		case 3: //lush
		scorestrong = scorestrong + score;
		break;
		case 4: //shy
		scoreshy = scoreshy + score;
		break;
		case 5: //alien
		scorealien = scorealien + score;
		break;
		case 6: //spanx
		scorespanx = scorespanx + score;
		break;
	}
}

function checkIfButlerIsOn() {
	if (dDialog48.GetOptionState(1) != eOptionOn && 
		dDialog48.GetOptionState(2) != eOptionOn && 
		dDialog48.GetOptionState(3) != eOptionOn && 
		dDialog48.GetOptionState(4) != eOptionOn && 
		dDialog48.GetOptionState(5) != eOptionOn) {
			dDialog48.SetOptionState (6, eOptionOn);
		}
}

function shyDialogAprovalCheck() {
	if(scoreshy > 2) {
		dDialog56.Start();
	} else {
		dDialog57.Start();
	}
}

function cButler_Interact()
{
  dDiaButler1.Start();
}

function gInitialMenu_OnClic(GUI *theGui, MouseButton button)
{
	
}

function StartBtn_OnClick(GUIControl *control, MouseButton button)
{
	if(setAc == false) {
		acmusic = aOverMusic.Play(eAudioPriorityNormal, eRepeat);
		acmusic.Volume = 60;
		setAc = true;
	} 
	UnPauseGame();
	gInitialMenu.Visible = false;
	gInventoryBar.Visible = true;
	ReturnBtn.Visible = true;
	if(startedGame == true){
		
		//RestoreGameSlot(40);
		RestartGame();
	}else {
		//player.ChangeRoom(2, 265, 265, eDirectionUp);
		startedGame = true;
		SetRestartPoint();
		//SaveGameSlot(40, "restart");
	}
}

function QuitBtn_OnClick(GUIControl *control, MouseButton button)
{
	if(setAc == true) {
		acmusic.Stop();
	}
	QuitGame(1);
}

function ReturnBtn_OnClick(GUIControl *control, MouseButton button)
{
	gInitialMenu.Visible = false;
	gInventoryBar.Visible = true;
}


function updateIntro() {
	switch(clicks) {
	case 0: 
	gIntro.Visible = true;
	introLabel.Text = "It's the night of the Superhero Speed Date. The reason's in the name: a gathering for superheroes infamous and... not so much.";
	break;
	case 1: 
	introLabel.Text = "Unfortunately for me, I'm neither of those. I'm a journalist at the Warren City Times: All the news that's fit to spit. We... have an eccentric publisher.";
	break;
	case 2: 
	introLabel.Text = "Problem is, I don't exactly have an invitation. Or any superpowers.\nBut I need to meet these people.";
	break;
	case 3: 
	introLabel.Text = "I swiped a Super Victory League membership card from a press conference that week. That'll have to be enough.";
	break;
	case 4: 
	gIntro.Visible = false;
	player.ChangeRoom(6, 875, 744); break;

	}
	clicks++;
}


function PlayDong() {
	aLostCraftHowl.Play();
}



function cGuard1_Talk()
{
	if(playerName.CompareTo("Player") == 0)
		dGuard1.Start();
	else
		dGuard2.Start();
}

//For getting the name

function askNameInput() {
	
	gInputName.Visible = true;
	
}

function btnConfirm_OnClick(GUIControl *control, MouseButton button)
{
	if(nameBox.Text.Length > 0) {
		playerName = nameBox.Text;
		gInputName.Visible = false;
		cGuard1.Say("Oh, so it's %s",playerName);
	} else {
		cGuard1.Say("Oh, did you forget your name?");
	}
}

function gIntro_OnClick(GUI *theGui, MouseButton button)
{
	updateIntro();
}

function cSpanx_Talk()
{
	dSpanx1.Start();
}

function cEvil_AnyClick()
{
	dEvilStart.Start();
}

function cStrong_Talk()
{
	dLushStart.Start();
}

function cShy_Talk()
{
	dShy1.Start();
}

function cAlien_Talk()
{
	dAlien1.Start();
}
