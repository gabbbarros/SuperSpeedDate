
//----------------------------------------------------------------------------------------------------
// game_start
//----------------------------------------------------------------------------------------------------
function game_start() 
{
	PauseGame();
	ReturnBtn.Visible = false;
	gInitialMenu.Visible = true;
	clicks = 0;
	partytimer = 0;
	Clock.Visible = false;	
	Clock.NormalGraphic = 126;
}

//----------------------------------------------------------------------------------------------------
// repeatedly_execute
//----------------------------------------------------------------------------------------------------
function repeatedly_execute() 
{
}

//----------------------------------------------------------------------------------------------------
// repeatedly_execute_always
//----------------------------------------------------------------------------------------------------
function repeatedly_execute_always() 
{
}

//----------------------------------------------------------------------------------------------------
// on_key_press
//----------------------------------------------------------------------------------------------------
function on_key_press(eKeyCode keycode) 
{
  if (IsGamePaused()) keycode = 0;
  
  // "System Keys"
  if (keycode == eKeyCtrlQ) QuitGame(1); // Ctrl-Q
  if (keycode == eKeyF9) RestartGame(); // F9
  if (keycode == eKeyF12) SaveScreenShot("scrnshot.pcx");  // F12
  
  // Debugger Keys
  if (keycode == eKeyCtrlS) Debug(0,0); // Ctrl-S, give all inventory
  if (keycode == eKeyCtrlV) Debug(1,0); // Ctrl-V, version
  if (keycode == eKeyCtrlA) Debug(2,0); // Ctrl-A, show walkable areas
  if (keycode == eKeyCtrlX) Debug(3,0); // Ctrl-X, teleport to room
}

//----------------------------------------------------------------------------------------------------
// on_mouse_click
//----------------------------------------------------------------------------------------------------
function on_mouse_click(MouseButton button)
{
	// all mouse clicks are handled in TwoClickHandler.asc!
}

//----------------------------------------------------------------------------------------------------
// on_event
//----------------------------------------------------------------------------------------------------
function on_event (EventType event, int data) 
{
}

//----------------------------------------------------------------------------------------------------
// unhandled_event
//----------------------------------------------------------------------------------------------------
function unhandled_event (int what, int type) 
{
	if (what == 1) // Unhandled events for HOTSPOTS
	{
		if (type == 1) // look
		{
			player.Say("I see nothing special about it.");
		}
		if (type == 2) // interact
		{
			player.Say("I can't do anything with it.");
		}
		if (type == 3) // use inv on
		{
			player.Say("That won't do anything.");
		}
	}
	if (what == 2) // Unhandled events for OBJECTS
	{
		if (type == 0) // look
		{
			player.Say("Looks alright.");
		}
		if (type == 1) // interact
		{
			player.Say("I don't want to have it.");
		}
		if (type == 3) // use inv on
		{
			player.Say("That's a funny idea.");
		}
	}
	if (what == 3) // Unhandled events for CHARACTERS
	{
		if (type == 0) // look
		{
			player.Say("Hm.");
		}
		if (type == 1) // interact
		{
			player.Say("Got nothing to say.");
		}
		if (type == 3) // use inv on
		{
			player.Say("I don't think I should give that away.");
		}
	}
	if (what == 5) // Unhandled events for INVENTORY ITEMS
	{
		if (type == 0) // look
		{
			player.Say("It's just some junk in my inventory.");
		}
		if (type == 1) // interact
		{
			player.Say("Er, no?");
		}
		if (type == 3) // use inv on
		{
			player.Say("That's ridiculous.");
		}
	}
}

function endConversation(int characterID) {
	if(characterID != 1) {
		Wait(10);
		FadeOut(70);
		Wait(30);
		aPartysounds.Play();
		gTimePass.Visible = true;
		FadeIn(60);
		Wait(50);
		FadeOut(60);
		aPartysounds.Stop();
		gTimePass.Visible = false;
		Wait(40);
		switch(characterID) {
			case 2:
				cEvil.ChangeRoom(1);
				break;
			case 3:
				cStrong.ChangeRoom(1);
				break;
			case 4:
				cShy.ChangeRoom(1);
				break;
			case 5:
				cAlien.ChangeRoom(1);
				break;
			case 6:
				cSpanx.ChangeRoom(1);
				break;
		}
		FadeIn(30);
		
		partytimer++;
		aclock1.Play();
	
		switch(partytimer) {
			case 1:
			Clock.NormalGraphic = 51;
			break;
			case 2:
			Clock.NormalGraphic = 55;
			break;
			case 3:
			Clock.NormalGraphic = 56;
			break;
			case 4:
				Clock.NormalGraphic = 58;
			break;
			case 5:
				Clock.Visible = false;
		}
		
		if(partytimer == 5) {
			//end game
			ac.Stop();
			//Display("Time is over");
			//player.ChangeRoom(7);
			if(cEgo.Room != cButler.Room) {
				if(cEgo.Room == 3)
					cButler.ChangeRoom(cEgo.Room, 931, 665, eDirectionDown);
				else
					cButler.ChangeRoom(cEgo.Room, 199, 469, eDirectionDown);
			}
			dButlerTimesUp.Start();
		}
	}
}

function activateFinalRoom() {
	
}


//----------------------------------------------------------------------------------------------------
// dialog_request
//----------------------------------------------------------------------------------------------------
function dialog_request(int param) 
{
}

//----------------------------------------------------------------------------------------------------
// gInventoryBar
//----------------------------------------------------------------------------------------------------
/*function btnInvScrollLeft_OnClick(GUIControl *control, MouseButton button)
{
	InventoryWindow1.ScrollDown();
}

function btnInvScrollRight_OnClick(GUIControl *control, MouseButton button)
{
	InventoryWindow1.ScrollUp();
}*/

//int[] times = new int[5];

function btnQuit_OnClick(GUIControl *control, MouseButton button)
{	
	gInventoryBar.Visible = false;
	gInitialMenu.Visible = true;
	aPositivesound.Play();
	PauseGame();
}

function modifyscore(int characterID, int score) {
	switch(characterID) {
		case 1: //butler
		scorebutler = scorebutler + score;
		/*if(score > 0) {
			aAlfredp.Play();
		}else {
			aAlfredn.Play();
		}*/
		break;
		case 2: //evil
		scoreevil = scoreevil + score;
		/*if(score > 0) {
			aEvilp.Play();
		}else {
			aEviln.Play();
		}*/
		break;
		case 3: //lush
		scorestrong = scorestrong + score;
		/*if(score > 0) {
			aStrongp.Play();
		}else {
			aStrongn.Play();
		}*/
		break;
		case 4: //shy
		scoreshy = scoreshy + score;
		/*if(score > 0) {
			aShyp.Play();
		}else {
			aShyn.Play();
		}*/
		break;
		case 5: //alien
		scorealien = scorealien + score;
		/*if(score > 0) {
			aAlienp.Play();
		}else {
			aAlienn.Play();
		}*/
		break;
		case 6: //spanx
		scorespanx = scorespanx + score;
		/*if(score > 0) {
			aSpanxp.Play();
		}else {
			aSpanxn.Play();
		}*/
		break;
	}
	if(score > 0) {
		aPositivesound1.Play();
	} else {
		aNegativesound1.Play();
	}
}

function checkIfButlerIsOn(int option) {
	if(option == 6) {
		dButlerOption.SetOptionState(2, eOptionOff);
		dDialog47.SetOptionState(1, eOptionOff);
	}
	if (dDialog48.GetOptionState(1) != eOptionOn && 
		dDialog48.GetOptionState(2) != eOptionOn && 
		dDialog48.GetOptionState(3) != eOptionOn && 
		dDialog48.GetOptionState(4) != eOptionOn && 
		dDialog48.GetOptionState(5) != eOptionOn) {
			dDialog48.SetOptionState (6, eOptionOn);
		}
}

function shyDialogAprovalCheck() {
	if(scoreshy > 2) {
		dDialog56.Start();
	} else {
		dDialog57.Start();
	}
}

function cButler_Interact()
{
	if(partytimer <=1)
		dButler0.Start();
	else if(partytimer <=3)
		dButler1.Start();
	else if(partytimer < 5)
		dButler2.Start();
	else
		dEndingButler.Start();
}

function gInitialMenu_OnClic(GUI *theGui, MouseButton button)
{
	
}

function StartBtn_OnClick(GUIControl *control, MouseButton button)
{
	if(setAc == false) {
		acmusic = aOverMusic.Play(eAudioPriorityNormal, eRepeat);
		acmusic.Volume = 60;
		setAc = true;
	} 
	if(ac != null) {
		ac.Stop();
	}
	aPositivesound.Play();
	UnPauseGame();
	gInitialMenu.Visible = false;
	gInventoryBar.Visible = true;
	ReturnBtn.Visible = true;
	if(startedGame == true){
		
		//RestoreGameSlot(40);
		RestartGame();
	}else {
		//player.ChangeRoom(2, 265, 265, eDirectionUp);
		startedGame = true;
		SetRestartPoint();
		//SaveGameSlot(40, "restart");
	}
}

function QuitBtn_OnClick(GUIControl *control, MouseButton button)
{
	if(setAc == true) {
		acmusic.Stop();
	}
	if(ac != null) {
		ac.Stop();
	}
	aPositivesound.Play();
	QuitGame(1);
}

function ReturnBtn_OnClick(GUIControl *control, MouseButton button)
{
	UnPauseGame();
	aPositivesound.Play();
	gInitialMenu.Visible = false;
	gInventoryBar.Visible = true;
}


function updateIntro() {
	switch(clicks) {
	case 0: 
	gIntro.Visible = true;
	introLabel.Text = "It's the night of the Superhero Speed Date: a gathering for superheroes infamous and... not so much.";
	break;
	case 1: 
	introLabel.Text = "Unfortunately for me, I'm neither of those. I'm a journalist at the Warren City Times: All the news that's fit to spit. We... have an eccentric publisher.";
	break;
	case 2: 
	introLabel.Text = "In addition to not having superpowers, I don't have an invitation. \nWhat I do have is this forged Super Victory League Membership Card.";
	break;
	case 3: 
	introLabel.Text = "A few hours of conversation in there could make my career. Now, I've just got to sell it.";
	break;
	case 4: 
	gIntro.Visible = false;
	player.ChangeRoom(6, 875, 744); break;

	}
	clicks++;
}


function PlayDong() {
	aLostCraftHowl.Play();
}



function cGuard1_Talk()
{
	if(player.Room == 6)
		dGuard1.Start();
	else
		dGuard2.Start();
}



function gIntro_OnClick(GUI *theGui, MouseButton button)
{
	updateIntro();
}

function cSpanx_Talk()
{
	if(partytimer < 5)
		dSpanx1.Start();
	else
		dEndingSpanx.Start();
}

function cEvil_AnyClick()
{
	if(player.Room == 3) {
		dEvilStart.Start();
	} else {
		dEndingEvil.Start();
	}
}

function cStrong_Talk()
{
	if(partytimer < 5)
		dLushStart.Start();
	else
		dEndingLush.Start();
}

function cShy_Talk()
{
	if(partytimer < 5)
		dShy1.Start();
	else
		dEndingShy.Start();
}

function cAlien_Talk()
{
	if(partytimer < 5) 
		dAlien1.Start();
	else
		dEndingAlien.Start();
}

function gGui4_OnClick(GUI *theGui, MouseButton button)
{
	gGui4.Visible = false;
	gInitialMenu.Visible = true;
	ReturnBtn.Visible = false;
}
